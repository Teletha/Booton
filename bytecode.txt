{
mv = cw.visitMethod(ACC_PROTECTED, "chunkSize", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(117, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/util/stream/AbstractSpinedBuffer", "initialChunkPower", "I");
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/util/stream/AbstractSpinedBuffer", "initialChunkPower", "I");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitIntInsn(BIPUSH, 30);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(119, l4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I");
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(120, l5);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISHL);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
