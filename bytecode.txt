visit label -1
visit label 3
visit label 4
visit label 5
visit label 6
visit label 7
visit label 9
visit label 0
visit label 1
visit label 2
visit label 8
visit label 10
visit label 11
booton.translator.flow.TryTest booton.translator.flow.TryTest
-1	  in : []		out : [3]		dom : []	back : []	code : 
3	  in : [-1]		out : [4]		dom : [-1]	back : []	code : A=new boot.BI(0) [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	back : []	code : A.BV("1","one") [Expression] ; [Expression]
5	  in : [4]		out : [6]		dom : [4]	back : []	code : A.BV("2","two") [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	back : []	code : B="" [Expression] ; [Expression]
7	  in : [6]		out : [8]		dom : [6]	back : []	code : D=A.Kw().HE() [Expression] ; [Expression]
9	  in : [8]		out : [0]		dom : [8]	back : []	code : C=D.HQ() [Expression] ; [Expression]
0	  in : [9]		out : [1]		dom : [9]	back : []	code : B=new boot.x(boot.L.U(B),0).Y("1").G() [Expression] ; [Expression]
1	  in : [0]		out : [8]		dom : [0]	back : []	code : 
2	  in : []		out : [8]		dom : []	back : []	code : 
8	  in : [7,1,2]		out : [9,10]		dom : []	back : [1]	code : D.HS()!=0 [Condition]
10	  in : [8]		out : []		dom : [8]	back : []	code : return  [Expression] B [Expression] ; [Expression]
11	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(ACC_PUBLIC, "act", "()Ljava/lang/String;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/IllegalArgumentException");
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(692, l3);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitVarInsn(ASTORE, 1);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(693, l4);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn("1");
mv.visitLdcInsn("one");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(694, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn("2");
mv.visitLdcInsn("two");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(695, l6);
mv.visitLdcInsn("");
mv.visitVarInsn(ASTORE, 2);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(697, l7);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;");
mv.visitVarInsn(ASTORE, 4);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"booton/translator/flow/TryTest$30", "java/util/Map", "java/lang/String", Opcodes.TOP, "java/util/Iterator"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/util/Map$Entry");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l0);
mv.visitLineNumber(699, l0);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "(Ljava/lang/String;)V");
mv.visitLdcInsn("1");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l1);
mv.visitLineNumber(700, l1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"booton/translator/flow/TryTest$30", "java/util/Map", "java/lang/String", "java/util/Map$Entry", "java/util/Iterator"}, 1, new Object[] {"java/lang/IllegalArgumentException"});
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l8);
mv.visitLineNumber(697, l8);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"booton/translator/flow/TryTest$30", "java/util/Map", "java/lang/String", Opcodes.TOP, "java/util/Iterator"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z");
mv.visitJumpInsn(IFNE, l9);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(703, l10);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARETURN);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLocalVariable("this", "Lbooton/translator/flow/TryTest$30;", null, l3, l11, 0);
mv.visitLocalVariable("map", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", l4, l11, 1);
mv.visitLocalVariable("valeu", "Ljava/lang/String;", null, l7, l11, 2);
mv.visitLocalVariable("entry", "Ljava/util/Map$Entry;", "Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;", l0, l8, 3);
mv.visitMaxs(3, 6);
mv.visitEnd();
}
