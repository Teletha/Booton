visit label -1
visit label 0
visit label 2
merge2
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : 

visit label 1
visit label 3
merge3
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]	out : [3,4]		dom : [0]	code : A==null [Condition] B!=null [Condition]
3	  in : [1]	out : []		dom : [1]	code : 

visit label 4
visit label 5
visit label 7
merge7
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]	out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]	out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]	out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]	out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]	out : []		dom : [5]	code : 

visit label 6
visit label 8
visit label 10
visit label 11
visit label 12
visit label 14
merge14
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]	out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]	out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]	out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]	out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]	out : []		dom : [5]	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]	out : [8]		dom : [5]	code : D=0 [Expression] ; [Expression]
8	  in : [6]	out : [9]		dom : [6]	code : 
10	  in : []	out : [11]		dom : []	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]	out : [12]		dom : [10]	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]	out : [13,14]		dom : [11]	code : E!=F [Condition]
14	  in : [12]	out : []		dom : [12]	code : 

visit label 13
visit label 17
merge17
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]	out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]	out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]	out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]	out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]	out : []		dom : [5]	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]	out : [8]		dom : [5]	code : D=0 [Expression] ; [Expression]
8	  in : [6]	out : [9]		dom : [6]	code : 
10	  in : []	out : [11]		dom : []	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]	out : [12]		dom : [10]	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]	out : [13,14]		dom : [11]	code : E!=F [Condition]
14	  in : [12]	out : [15]		dom : [12]	code : 
13	  in : [12]	out : [16,17]		dom : [12]	code : E!=null [Condition]
17	  in : [13]	out : []		dom : [13]	code : 

visit label 16
visit label 18
visit label 19
merge19
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]	out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]	out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]	out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]	out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]	out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]	out : []		dom : [5]	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]	out : [8]		dom : [5]	code : D=0 [Expression] ; [Expression]
8	  in : [6]	out : [9]		dom : [6]	code : 
10	  in : []	out : [11]		dom : []	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]	out : [12]		dom : [10]	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]	out : [13,14]		dom : [11]	code : E!=F [Condition]
14	  in : [12]	out : [15]		dom : [12]	code : 
13	  in : [12]	out : [16,17]		dom : [12]	code : E!=null [Condition]
17	  in : [13]	out : []		dom : [13]	code : return  [Expression] false [Expression] ; [Expression]
16	  in : [13]	out : [18]		dom : [13]	code : G=boot.BU.DX(E,F) [Expression] ; [Expression]
18	  in : [16]	out : [15,19]		dom : [16]	code : G!=0 [Condition]
19	  in : [18]	out : []		dom : [18]	code : 

visit label 15
visit label 9
visit label 20
merge20
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]		out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]		out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]		out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]		out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]		out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]		out : []		dom : [5]	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]		out : [8]		dom : [5]	code : D=0 [Expression] ; [Expression]
8	  in : [6]		out : [9]		dom : [6]	code : 
10	  in : [9]		out : [11]		dom : [9]	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]		out : [12]		dom : [10]	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]		out : [13,14]		dom : [11]	code : E!=F [Condition]
14	  in : [12]		out : [15]		dom : [12]	code : 
13	  in : [12]		out : [16,17]		dom : [12]	code : E!=null [Condition]
17	  in : [13]		out : []		dom : [13]	code : return  [Expression] false [Expression] ; [Expression]
16	  in : [13]		out : [18]		dom : [13]	code : G=boot.BU.DX(E,F) [Expression] ; [Expression]
18	  in : [16]		out : [15,19]		dom : [16]	code : G!=0 [Condition]
19	  in : [18]		out : []		dom : [18]	code : return  [Expression] false [Expression] ; [Expression]
15	  in : [14,18]		out : [9]		dom : []	code : ++ [Expression] D [Expression] ; [Expression]
9	  in : [8,15]		out : [10,20]		dom : []	code : D<C [Condition]
20	  in : [9]		out : []		dom : [9]	code : 

visit label 21
merge21
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : A!=B [Condition]
2	  in : [0]		out : []		dom : [0]	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]		out : [3,4]		dom : [0]	code : (A!=null&&B!=null) [Condition]
3	  in : [1]		out : []		dom : [1]	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]		out : [5]		dom : [1]	code : C=A.length [Expression] ; [Expression]
5	  in : [4]		out : [6,7]		dom : [4]	code : B.length==C [Condition]
7	  in : [5]		out : []		dom : [5]	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]		out : [8]		dom : [5]	code : D=0 [Expression] ; [Expression]
8	  in : [6]		out : [9]		dom : [6]	code : 
10	  in : [9]		out : [11]		dom : [9]	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]		out : [12]		dom : [10]	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]		out : [13,14]		dom : [11]	code : E!=F [Condition]
14	  in : [12]		out : [15]		dom : [12]	code : 
13	  in : [12]		out : [16,17]		dom : [12]	code : E!=null [Condition]
17	  in : [13]		out : []		dom : [13]	code : return  [Expression] false [Expression] ; [Expression]
16	  in : [13]		out : [18]		dom : [13]	code : G=boot.BU.DX(E,F) [Expression] ; [Expression]
18	  in : [16]		out : [15,19]		dom : [16]	code : G!=0 [Condition]
19	  in : [18]		out : []		dom : [18]	code : return  [Expression] false [Expression] ; [Expression]
15	  in : [14,18]		out : [9]		dom : []	code : ++ [Expression] D [Expression] ; [Expression]
9	  in : [8,15]		out : [10,20]		dom : []	code : D<C [Condition]
20	  in : [9]		out : []		dom : [9]	code : return  [Expression] true [Expression] ; [Expression]
21	  in : []		out : []		dom : []	code : 

js.util.Arrays deepEquals
-1	  in : []		out : [0]		dom : []	back : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	back : []	code : A!=B [Condition]
2	  in : [0]		out : []		dom : [0]	back : []	code : return  [Expression] true [Expression] ; [Expression]
1	  in : [0]		out : [3,4]		dom : [0]	back : []	code : (A!=null&&B!=null) [Condition]
3	  in : [1]		out : []		dom : [1]	back : []	code : return  [Expression] false [Expression] ; [Expression]
4	  in : [1]		out : [5]		dom : [1]	back : []	code : C=A.length [Expression] ; [Expression]
5	  in : [4]		out : [6,7]		dom : [4]	back : []	code : B.length==C [Condition]
7	  in : [5]		out : []		dom : [5]	back : []	code : return  [Expression] false [Expression] ; [Expression]
6	  in : [5]		out : [8]		dom : [5]	back : []	code : D=0 [Expression] ; [Expression]
8	  in : [6]		out : [9]		dom : [6]	back : []	code : 
10	  in : [9]		out : [11]		dom : [9]	back : []	code : E=A[D] [Expression] ; [Expression]
11	  in : [10]		out : [12]		dom : [10]	back : []	code : F=B[D] [Expression] ; [Expression]
12	  in : [11]		out : [13,14]		dom : [11]	back : []	code : E!=F [Condition]
14	  in : [12]		out : [15]		dom : [12]	back : []	code : 
13	  in : [12]		out : [16,17]		dom : [12]	back : []	code : E!=null [Condition]
17	  in : [13]		out : []		dom : [13]	back : []	code : return  [Expression] false [Expression] ; [Expression]
16	  in : [13]		out : [18]		dom : [13]	back : []	code : G=boot.BU.DX(E,F) [Expression] ; [Expression]
18	  in : [16]		out : [15,19]		dom : [16]	back : []	code : G!=0 [Condition]
19	  in : [18]		out : []		dom : [18]	back : []	code : return  [Expression] false [Expression] ; [Expression]
15	  in : [14,18]		out : [9]		dom : [12]	back : []	code : ++ [Expression] D [Expression] ; [Expression]
9	  in : [8,15]		out : [10,20]		dom : [8]	back : [15]	code : D<C [Condition]
20	  in : [9]		out : []		dom : [9]	back : []	code : return  [Expression] true [Expression] ; [Expression]
21	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(1204, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(1205, l2);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitLineNumber(1208, l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 1);
Label l4 = new Label();
mv.visitJumpInsn(IFNONNULL, l4);
mv.visitLabel(l3);
mv.visitLineNumber(1209, l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitLineNumber(1212, l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 2);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLineNumber(1214, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 2);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l6);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(1215, l7);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l6);
mv.visitLineNumber(1218, l6);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l8 = new Label();
mv.visitLabel(l8);
Label l9 = new Label();
mv.visitJumpInsn(GOTO, l9);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitLineNumber(1219, l10);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(1220, l11);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 5);
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitLineNumber(1222, l12);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 5);
Label l13 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l13);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLineNumber(1223, l14);
Label l15 = new Label();
mv.visitJumpInsn(GOTO, l15);
mv.visitLabel(l13);
mv.visitLineNumber(1226, l13);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/Object", "java/lang/Object"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
Label l16 = new Label();
mv.visitJumpInsn(IFNONNULL, l16);
Label l17 = new Label();
mv.visitLabel(l17);
mv.visitLineNumber(1227, l17);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l16);
mv.visitLineNumber(1231, l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "js/util/Arrays", "deepEquals0", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
mv.visitVarInsn(ISTORE, 6);
Label l18 = new Label();
mv.visitLabel(l18);
mv.visitLineNumber(1233, l18);
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IFNE, l15);
Label l19 = new Label();
mv.visitLabel(l19);
mv.visitLineNumber(1234, l19);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l15);
mv.visitLineNumber(1218, l15);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitIincInsn(3, 1);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitJumpInsn(IF_ICMPLT, l10);
Label l20 = new Label();
mv.visitLabel(l20);
mv.visitLineNumber(1237, l20);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l21 = new Label();
mv.visitLabel(l21);
mv.visitLocalVariable("a1", "[Ljava/lang/Object;", null, l0, l21, 0);
mv.visitLocalVariable("a2", "[Ljava/lang/Object;", null, l0, l21, 1);
mv.visitLocalVariable("length", "I", null, l5, l21, 2);
mv.visitLocalVariable("i", "I", null, l8, l20, 3);
mv.visitLocalVariable("e1", "Ljava/lang/Object;", null, l11, l15, 4);
mv.visitLocalVariable("e2", "Ljava/lang/Object;", null, l12, l15, 5);
mv.visitLocalVariable("eq", "Z", null, l18, l15, 6);
mv.visitMaxs(2, 7);
mv.visitEnd();
}
set 15  20  9
_GC:function(A,B,C,D,E,F,G){
		// -1 -> 0
		// 1204
		if (A!=B) {
			// 0 -> 1
			// 1208
			if (A==null||B==null) {
				// 1 -> 3
				// 1209
				return false;
			} else {
				// 1 -> 4
				// 1212
				C=A.length;
				// 4 -> 5
				// 1214
				if (B.length==C) {
					// 5 -> 6
					// 1218
					D=0;
					// 6 -> 8
					// 8 -> 9
					l9: for (; D<C; ++D) {
						// 9 -> 10
						// 1219
						E=A[D];
						// 10 -> 11
						// 1220
						F=B[D];
						// 11 -> 12
						// 1222
						if (E!=F) {
							// 12 -> 13
							// 1226
							if (E!=null) {
								// 13 -> 16
								// 1231
								G=boot.BU.DX(E,F);
								// 16 -> 18
								// 1233
								if (G==0) {
									// 18 -> 19
									// 1234
									return false;
								}
								continue l9; // 18 -> 15 Entrance 9
							} else {
								// 13 -> 17
								// 1227
								return false;
							}
						} else {
							// 12 -> 14
							// 1223
							continue l9; // 14 -> 15 Entrance 9
						}
						continue l9; // 12 -> 15 Entrance 9
					}
					// 9 -> 20
					// 1237
					return true;
				} else {
					// 5 -> 7
					// 1215
					return false;
				}
			}
		} else {
			// 0 -> 2
			// 1205
			return true;
		}
	},
	
visit label -1
visit label 0
visit label 2
merge2
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : this.h!=null [Condition]
2	  in : [0]	out : []		dom : [0]	code : 

visit label 3
visit label 5
merge5
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : this.h!=null [Condition]
2	  in : [0]	out : [3]		dom : [0]	code : this.h=new boot.BI(0) [Expression] ; [Expression]
3	  in : [2]	out : [4]		dom : [2]	code : C=(D=Object.keys(this.g)).length [Expression] ; [Expression] B=0 [Expression] ; [Expression]
5	  in : []	out : []		dom : []	code : 

visit label 6
visit label 7
visit label 8
visit label 4
visit label 1
merge1
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : this.h!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : this.h=new boot.BI(0) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : C=(D=Object.keys(this.g)).length [Expression] ; [Expression] B=0 [Expression] ; [Expression]
5	  in : [4]		out : [6]		dom : [4]	code : A=D[B] [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	code : E=boot.A.B(A) [Expression] ; [Expression]
7	  in : [6]		out : [8]		dom : [6]	code : this.h.BV(E,boot.DX.KB(null,boot.array("A",[E]),new boot.DW(E,this.g[A],0))) [Expression] ; [Expression]
8	  in : [7]		out : [4]		dom : [7]	code : ++ [Expression] B [Expression] ; [Expression]
4	  in : [3,8]		out : [5,1]		dom : []	code : B<C [Condition]
1	  in : [0,4]		out : []		dom : []	code : 

visit label 9
merge9
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : this.h!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : this.h=new boot.BI(0) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : C=(D=Object.keys(this.g)).length [Expression] ; [Expression] B=0 [Expression] ; [Expression]
5	  in : [4]		out : [6]		dom : [4]	code : A=D[B] [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	code : E=boot.A.B(A) [Expression] ; [Expression]
7	  in : [6]		out : [8]		dom : [6]	code : this.h.BV(E,boot.DX.KB(null,boot.array("A",[E]),new boot.DW(E,this.g[A],0))) [Expression] ; [Expression]
8	  in : [7]		out : [4]		dom : [7]	code : ++ [Expression] B [Expression] ; [Expression]
4	  in : [3,8]		out : [5,1]		dom : []	code : B<C [Condition]
1	  in : [0,4]		out : []		dom : []	code : return  [Expression] this.h.IV().BH(boot.array("Bu",this.h.BF(),null)) [Expression] ; [Expression]
9	  in : []		out : []		dom : []	code : 

js.lang.reflect.JSAnnotatedElement getDeclaredAnnotations
-1	  in : []		out : [0]		dom : []	back : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	back : []	code : this.h!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	back : []	code : this.h=new boot.BI(0) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	back : []	code : C=(D=Object.keys(this.g)).length [Expression] ; [Expression] B=0 [Expression] ; [Expression]
5	  in : [4]		out : [6]		dom : [4]	back : []	code : A=D[B] [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	back : []	code : E=boot.A.B(A) [Expression] ; [Expression]
7	  in : [6]		out : [8]		dom : [6]	back : []	code : this.h.BV(E,boot.DX.KB(null,boot.array("A",[E]),new boot.DW(E,this.g[A],0))) [Expression] ; [Expression]
8	  in : [7]		out : [4]		dom : [7]	back : []	code : ++ [Expression] B [Expression] ; [Expression]
4	  in : [3,8]		out : [5,1]		dom : [3]	back : [8]	code : B<C [Condition]
1	  in : [0,4]		out : []		dom : [0]	back : []	code : return  [Expression] this.h.IV().BH(boot.array("Bu",this.h.BF(),null)) [Expression] ; [Expression]
9	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(ACC_PUBLIC + ACC_FINAL, "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(166, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "privateAnnotations", "Ljava/util/Map;");
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(167, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "js/lang/reflect/JSAnnotatedElement", "privateAnnotations", "Ljava/util/Map;");
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(169, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "annotations", "Ljs/lang/NativeObject;");
mv.visitMethodInsn(INVOKEVIRTUAL, "js/lang/NativeObject", "keys", "()[Ljava/lang/String;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"js/lang/reflect/JSAnnotatedElement", Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, "[Ljava/lang/String;"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 1);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(170, l6);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "js/lang/reflect/JSClass", "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 5);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(172, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "privateAnnotations", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ICONST_1);
mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(AASTORE);
mv.visitTypeInsn(NEW, "js/lang/reflect/JSAnnotatedElement$AnnotationProxy");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "annotations", "Ljs/lang/NativeObject;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "js/lang/NativeObject", "getProperty", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitMethodInsn(INVOKESPECIAL, "js/lang/reflect/JSAnnotatedElement$AnnotationProxy", "<init>", "(Ljava/lang/Class;Ljava/lang/Object;)V");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/reflect/Proxy", "newProxyInstance", "(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/annotation/Annotation");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(169, l8);
mv.visitIincInsn(2, 1);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IF_ICMPLT, l5);
mv.visitLabel(l1);
mv.visitLineNumber(175, l1);
mv.visitFrame(Opcodes.F_FULL, 1, new Object[] {"js/lang/reflect/JSAnnotatedElement"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "privateAnnotations", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "js/lang/reflect/JSAnnotatedElement", "privateAnnotations", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "size", "()I");
mv.visitTypeInsn(ANEWARRAY, "java/lang/annotation/Annotation");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/annotation/Annotation;");
mv.visitInsn(ARETURN);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLocalVariable("this", "Ljs/lang/reflect/JSAnnotatedElement;", null, l0, l9, 0);
mv.visitLocalVariable("name", "Ljava/lang/String;", null, l6, l8, 1);
mv.visitLocalVariable("type", "Ljava/lang/Class;", null, l7, l8, 5);
mv.visitMaxs(9, 6);
mv.visitEnd();
}
set 8  1  4
IU:function(A,B,C,D,E){
		// -1 -> 0
		// 166
		if (this.h==null) {
			// 0 -> 2
			// 167
			this.h=new boot.BI(0);
			// 2 -> 3
			// 169
			C=(D=Object.keys(this.g)).length;B=0;
			// 3 -> 4
			l4: for (; B<C; ++B) {
				// 4 -> 5
				A=D[B];
				// 5 -> 6
				// 170
				E=boot.A.B(A);
				// 6 -> 7
				// 172
				this.h.BV(E,boot.DX.KB(null,boot.array("A",[E]),new boot.DW(E,this.g[A],0)));
				continue l4; // 7 -> 8 Entrance 4
			}
			// 4 -> 1
			// 175
			return this.h.IV().BH(boot.array("Bu",this.h.BF(),null));
		}
		// 0 -> 1
	},
	
visit label -1
visit label 0
visit label 1
visit label 3
merge3
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1]		dom : [-1]	code : B=0 [Expression] ; [Expression]
1	  in : [0]	out : [2,3]		dom : [0]	code : this.BF()<=A.BF() [Condition]
3	  in : [1]	out : []		dom : [1]	code : 

visit label 4
visit label 6
visit label 5
visit label 7
merge7
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : B=0 [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : this.BF()<=A.BF() [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : C=A.HH() [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	code : 
6	  in : [5]		out : [5]		dom : [5]	code : B=(B|this.HI(C.HT())) [Expression] ; [Expression]
5	  in : [4,6]		out : [6,7]		dom : []	code : C.HV()!=0 [Condition]
7	  in : [5]		out : []		dom : [5]	code : 

visit label 2
visit label 9
visit label 11
visit label 12
merge12
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : B=0 [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : this.BF()<=A.BF() [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : C=A.HH() [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	code : 
6	  in : [5]		out : [5]		dom : [5]	code : B=(B|this.HI(C.HT())) [Expression] ; [Expression]
5	  in : [4,6]		out : [6,7]		dom : []	code : C.HV()!=0 [Condition]
7	  in : [5]		out : [8]		dom : [5]	code : 
2	  in : [1]		out : [9]		dom : [1]	code : C=this.HH() [Expression] ; [Expression]
9	  in : [2]		out : [10]		dom : [2]	code : 
11	  in : []		out : [10,12]		dom : []	code : A.HG(C.HT())==0 [Condition]
12	  in : [11]		out : []		dom : [11]	code : 

visit label 13
visit label 10
visit label 8
merge8
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : B=0 [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : this.BF()<=A.BF() [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : C=A.HH() [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	code : 
6	  in : [5]		out : [5]		dom : [5]	code : B=(B|this.HI(C.HT())) [Expression] ; [Expression]
5	  in : [4,6]		out : [6,7]		dom : []	code : C.HV()!=0 [Condition]
7	  in : [5]		out : [8]		dom : [5]	code : 
2	  in : [1]		out : [9]		dom : [1]	code : C=this.HH() [Expression] ; [Expression]
9	  in : [2]		out : [10]		dom : [2]	code : 
11	  in : [10]		out : [10,12]		dom : [10]	code : A.HG(C.HT())==0 [Condition]
12	  in : [11]		out : [13]		dom : [11]	code : C.LD() [Expression] ; [Expression]
13	  in : [12]		out : [10]		dom : [12]	code : B=1 [Expression] ; [Expression]
10	  in : [9,11,13]	out : [11,8]		dom : []	code : C.HV()!=0 [Condition]
8	  in : [7,10]		out : []		dom : []	code : 

visit label 14
merge14
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : B=0 [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : this.BF()<=A.BF() [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : C=A.HH() [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	code : 
6	  in : [5]		out : [5]		dom : [5]	code : B=(B|this.HI(C.HT())) [Expression] ; [Expression]
5	  in : [4,6]		out : [6,7]		dom : []	code : C.HV()!=0 [Condition]
7	  in : [5]		out : [8]		dom : [5]	code : 
2	  in : [1]		out : [9]		dom : [1]	code : C=this.HH() [Expression] ; [Expression]
9	  in : [2]		out : [10]		dom : [2]	code : 
11	  in : [10]		out : [10,12]		dom : [10]	code : A.HG(C.HT())==0 [Condition]
12	  in : [11]		out : [13]		dom : [11]	code : C.LD() [Expression] ; [Expression]
13	  in : [12]		out : [10]		dom : [12]	code : B=1 [Expression] ; [Expression]
10	  in : [9,11,13]	out : [11,8]		dom : []	code : C.HV()!=0 [Condition]
8	  in : [7,10]		out : []		dom : []	code : return  [Expression] B [Expression] ; [Expression]
14	  in : []		out : []		dom : []	code : 

js.util.AbstractSet removeAll
-1	  in : []		out : [0]		dom : []	back : []		code : 
0	  in : [-1]		out : [1]		dom : [-1]	back : []		code : B=0 [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	back : []		code : this.BF()<=A.BF() [Condition]
3	  in : [1]		out : [4]		dom : [1]	back : []		code : C=A.HH() [Expression] ; [Expression]
4	  in : [3]		out : [5]		dom : [3]	back : []		code : 
6	  in : [5]		out : [5]		dom : [5]	back : []		code : B=(B|this.HI(C.HT())) [Expression] ; [Expression]
5	  in : [4,6]		out : [6,7]		dom : [4]	back : [6]		code : C.HV()!=0 [Condition]
7	  in : [5]		out : [8]		dom : [5]	back : []		code : 
2	  in : [1]		out : [9]		dom : [1]	back : []		code : C=this.HH() [Expression] ; [Expression]
9	  in : [2]		out : [10]		dom : [2]	back : []		code : 
11	  in : [10]		out : [10,12]		dom : [10]	back : []		code : A.HG(C.HT())==0 [Condition]
12	  in : [11]		out : [13]		dom : [11]	back : []		code : C.LD() [Expression] ; [Expression]
13	  in : [12]		out : [10]		dom : [12]	back : []		code : B=1 [Expression] ; [Expression]
10	  in : [9,11,13]	out : [11,8]		dom : [9]	back : [11,13]		code : C.HV()!=0 [Condition]
8	  in : [7,10]		out : []		dom : [1]	back : []		code : return  [Expression] B [Expression] ; [Expression]
14	  in : []		out : []		dom : []	back : []		code : 

{
mv = cw.visitMethod(ACC_PUBLIC, "removeAll", "(Ljava/util/Collection;)Z", "(Ljava/util/Collection<*>;)Z", null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(75, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(77, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "js/util/AbstractSet", "size", "()I");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "size", "()I");
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(78, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "iterator", "()Ljava/util/Iterator;");
mv.visitVarInsn(ASTORE, 3);
Label l4 = new Label();
mv.visitLabel(l4);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(79, l6);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "java/util/Iterator"}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;");
mv.visitMethodInsn(INVOKEVIRTUAL, "js/util/AbstractSet", "remove", "(Ljava/lang/Object;)Z");
mv.visitInsn(IOR);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l5);
mv.visitLineNumber(78, l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z");
mv.visitJumpInsn(IFNE, l6);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(81, l7);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l2);
mv.visitLineNumber(82, l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "js/util/AbstractSet", "iterator", "()Ljava/util/Iterator;");
mv.visitVarInsn(ASTORE, 3);
Label l9 = new Label();
mv.visitLabel(l9);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLineNumber(83, l11);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "contains", "(Ljava/lang/Object;)Z");
mv.visitJumpInsn(IFEQ, l10);
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitLineNumber(84, l12);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "remove", "()V");
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitLineNumber(85, l13);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l10);
mv.visitLineNumber(82, l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z");
mv.visitJumpInsn(IFNE, l11);
mv.visitLabel(l8);
mv.visitLineNumber(89, l8);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitLocalVariable("this", "Ljs/util/AbstractSet;", "Ljs/util/AbstractSet<TE;>;", l0, l14, 0);
mv.visitLocalVariable("collection", "Ljava/util/Collection;", "Ljava/util/Collection<*>;", l0, l14, 1);
mv.visitLocalVariable("modified", "Z", null, l1, l14, 2);
mv.visitLocalVariable("i", "Ljava/util/Iterator;", "Ljava/util/Iterator<*>;", l4, l7, 3);
mv.visitLocalVariable("i", "Ljava/util/Iterator;", "Ljava/util/Iterator<*>;", l9, l8, 3);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
set 6  7  5
Hu:function(A,B,C){
		// -1 -> 0
		// 75
		B=0;
		// 0 -> 1
		// 77
		if (this.BF()<=A.BF()) {
			// 1 -> 2
			// 82
			C=this.HH();
			// 2 -> 9
			// 9 -> 10
			// 82
			l10: while (C.HV()!=0) {
				// 10 -> 11
				// 83
				if (A.HG(C.HT())!=0) {
					// 11 -> 12
					// 84
					C.LD();
					// 12 -> 13
					// 85
					B=1;
					continue l10; // 13 -> 10 Entrance 10
				}
				continue l10; // 11 -> 10 Entrance 10
			}
			// 10 -> 8
			// 89
			return B;
		} else {
			// 1 -> 3
			// 78
			C=A.HH();
			// 3 -> 4
			// 4 -> 5
			// 78
			l5: for (; C.HV()!=0; B=(B|this.HI(C.HT()))) {
				continue l5; // 5 -> 6 Entrance 5
			}
			// 5 -> 7
			// 81
			// 7 -> 8
		}
		// 1 -> 8
	},
	
visit label -1
visit label 0
visit label 2
merge2
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : this.i.RX()!=null [Condition]
2	  in : [0]	out : []		dom : [0]	code : 

visit label 3
visit label 1
visit label 6
merge6
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : this.i.RX()!=null [Condition]
2	  in : [0]	out : [3]		dom : [0]	code : boot.FA.prototype.RY.call(this,A,B) [Expression] ; [Expression]
3	  in : [2]	out : [4]		dom : [2]	code : 
1	  in : [0]	out : [5]		dom : [0]	code : D=A.KV().HH() [Expression] ; [Expression]
6	  in : []	out : []		dom : []	code : 

visit label 7
visit label 5
visit label 4
merge4
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : this.i.RX()!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : boot.FA.prototype.RY.call(this,A,B) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : 
1	  in : [0]		out : [5]		dom : [0]	code : D=A.KV().HH() [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	code : C=D.HT() [Expression] ; [Expression]
7	  in : [6]		out : [5]		dom : [6]	code : B.SM(this,new boot.FG(this.j,boot.CY.RV(C.KX(),boot.L.$),0),C.KR()) [Expression] ; [Expression]
5	  in : [1,7]		out : [6,4]		dom : []	code : D.HV()!=0 [Condition]
4	  in : [3,5]		out : []		dom : []	code : 

visit label 8
merge8
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : this.i.RX()!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : boot.FA.prototype.RY.call(this,A,B) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : 
1	  in : [0]		out : [5]		dom : [0]	code : D=A.KV().HH() [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	code : C=D.HT() [Expression] ; [Expression]
7	  in : [6]		out : [5]		dom : [6]	code : B.SM(this,new boot.FG(this.j,boot.CY.RV(C.KX(),boot.L.$),0),C.KR()) [Expression] ; [Expression]
5	  in : [1,7]		out : [6,4]		dom : []	code : D.HV()!=0 [Condition]
4	  in : [3,5]		out : []		dom : []	code : return [Expression] ; [Expression]
8	  in : []		out : []		dom : []	code : 

kiss.model.MapModel walk
-1	  in : []		out : [0]		dom : []	back : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	back : []	code : this.i.RX()!=null [Condition]
2	  in : [0]		out : [3]		dom : [0]	back : []	code : boot.FA.prototype.RY.call(this,A,B) [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	back : []	code : 
1	  in : [0]		out : [5]		dom : [0]	back : []	code : D=A.KV().HH() [Expression] ; [Expression]
6	  in : [5]		out : [7]		dom : [5]	back : []	code : C=D.HT() [Expression] ; [Expression]
7	  in : [6]		out : [5]		dom : [6]	back : []	code : B.SM(this,new boot.FG(this.j,boot.CY.RV(C.KX(),boot.L.$),0),C.KR()) [Expression] ; [Expression]
5	  in : [1,7]		out : [6,4]		dom : [1]	back : [7]	code : D.HV()!=0 [Condition]
4	  in : [3,5]		out : []		dom : [0]	back : []	code : return [Expression] ; [Expression]
8	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(ACC_PUBLIC, "walk", "(Ljava/lang/Object;Lkiss/model/PropertyWalker;)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(92, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "kiss/model/MapModel", "key", "Lkiss/model/Model;");
mv.visitMethodInsn(INVOKEVIRTUAL, "kiss/model/Model", "getCodec", "()Lkiss/model/Codec;");
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(93, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "kiss/model/Model", "walk", "(Ljava/lang/Object;Lkiss/model/PropertyWalker;)V");
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(94, l3);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l1);
mv.visitLineNumber(95, l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/util/Map");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;");
mv.visitVarInsn(ASTORE, 4);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"kiss/model/MapModel", "java/lang/Object", "kiss/model/PropertyWalker", Opcodes.TOP, "java/util/Iterator"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/util/Map$Entry");
mv.visitVarInsn(ASTORE, 3);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(96, l7);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "kiss/model/Property");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "kiss/model/MapModel", "value", "Lkiss/model/Model;");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;");
mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
mv.visitMethodInsn(INVOKESTATIC, "kiss/I", "transform", "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitMethodInsn(INVOKESPECIAL, "kiss/model/Property", "<init>", "(Lkiss/model/Model;Ljava/lang/String;)V");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;");
mv.visitMethodInsn(INVOKEINTERFACE, "kiss/model/PropertyWalker", "walk", "(Lkiss/model/Model;Lkiss/model/Property;Ljava/lang/Object;)V");
mv.visitLabel(l5);
mv.visitLineNumber(95, l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z");
mv.visitJumpInsn(IFNE, l6);
mv.visitLabel(l4);
mv.visitLineNumber(99, l4);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"kiss/model/MapModel", "java/lang/Object", "kiss/model/PropertyWalker"}, 0, new Object[] {});
mv.visitInsn(RETURN);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLocalVariable("this", "Lkiss/model/MapModel;", null, l0, l8, 0);
mv.visitLocalVariable("object", "Ljava/lang/Object;", null, l0, l8, 1);
mv.visitLocalVariable("walker", "Lkiss/model/PropertyWalker;", null, l0, l8, 2);
mv.visitLocalVariable("entry", "Ljava/util/Map$Entry;", null, l7, l5, 3);
mv.visitMaxs(7, 5);
mv.visitEnd();
}
set 7  4  5
RY:function(A,B,C,D){
		// -1 -> 0
		// 92
		if (this.i.RX()!=null) {
			// 0 -> 1
			// 95
			D=A.KV().HH();
			// 1 -> 5
			// 95
			l5: for (; D.HV()!=0; B.SM(this,new boot.FG(this.j,boot.CY.RV(C.KX(),boot.L.$),0),C.KR())) {
				// 5 -> 6
				C=D.HT();
				continue l5; // 6 -> 7 Entrance 5
			}
			// 5 -> 4
			// 99
			return;
		} else {
			// 0 -> 2
			// 93
			boot.FA.prototype.RY.call(this,A,B);
			// 2 -> 3
			// 94
			// 3 -> 4
		}
		// 0 -> 4
	},
	
visit label -1
visit label 0
visit label 2
merge2
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=0 [Condition]
2	  in : [0]	out : []		dom : [0]	code : 

visit label 3
visit label 1
visit label 5
visit label 7
visit label 8
visit label 9
merge9
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1,2]		dom : [-1]	code : A!=0 [Condition]
2	  in : [0]	out : [3]		dom : [0]	code : ++ [Expression] A [Expression] ; [Expression]
3	  in : [2]	out : [4]		dom : [2]	code : 
1	  in : [0]	out : [5]		dom : [0]	code : B=0 [Expression] ; [Expression]
5	  in : [1]	out : [6]		dom : [1]	code : 
7	  in : []	out : [8]		dom : []	code : ++ [Expression] A [Expression] ; [Expression]
8	  in : [7]	out : [9,10]		dom : [7]	code : B==-1 [Condition] A%5!=0 [Condition]
9	  in : [8]	out : []		dom : [8]	code : 

visit label 10
visit label 6
visit label 4
merge4
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : A!=0 [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : ++ [Expression] A [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : 
1	  in : [0]		out : [5]		dom : [0]	code : B=0 [Expression] ; [Expression]
5	  in : [1]		out : [6]		dom : [1]	code : 
7	  in : [6]		out : [8]		dom : [6]	code : ++ [Expression] A [Expression] ; [Expression]
8	  in : [7]		out : [9,10]		dom : [7]	code : (B!=-1&&A%5!=0) [Condition]
9	  in : [8]		out : []		dom : [8]	code : return  [Expression] 1000 [Number] ; [Expression]
10	  in : [8]		out : [6]		dom : [8]	code : ++ [Expression] B [Expression] ; [Expression]
6	  in : [5,10]		out : [7,4]		dom : []	code : B<3 [Condition]
4	  in : [3,6]		out : []		dom : []	code : 

visit label 11
merge11
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	code : A!=0 [Condition]
2	  in : [0]		out : [3]		dom : [0]	code : ++ [Expression] A [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	code : 
1	  in : [0]		out : [5]		dom : [0]	code : B=0 [Expression] ; [Expression]
5	  in : [1]		out : [6]		dom : [1]	code : 
7	  in : [6]		out : [8]		dom : [6]	code : ++ [Expression] A [Expression] ; [Expression]
8	  in : [7]		out : [9,10]		dom : [7]	code : (B!=-1&&A%5!=0) [Condition]
9	  in : [8]		out : []		dom : [8]	code : return  [Expression] 1000 [Number] ; [Expression]
10	  in : [8]		out : [6]		dom : [8]	code : ++ [Expression] B [Expression] ; [Expression]
6	  in : [5,10]		out : [7,4]		dom : []	code : B<3 [Condition]
4	  in : [3,6]		out : []		dom : []	code : return  [Expression] A [Expression] ; [Expression]
11	  in : []		out : []		dom : []	code : 

booton.translator.flow.ForTest booton.translator.flow.ForTest
-1	  in : []		out : [0]		dom : []	back : []	code : 
0	  in : [-1]		out : [1,2]		dom : [-1]	back : []	code : A!=0 [Condition]
2	  in : [0]		out : [3]		dom : [0]	back : []	code : ++ [Expression] A [Expression] ; [Expression]
3	  in : [2]		out : [4]		dom : [2]	back : []	code : 
1	  in : [0]		out : [5]		dom : [0]	back : []	code : B=0 [Expression] ; [Expression]
5	  in : [1]		out : [6]		dom : [1]	back : []	code : 
7	  in : [6]		out : [8]		dom : [6]	back : []	code : ++ [Expression] A [Expression] ; [Expression]
8	  in : [7]		out : [9,10]		dom : [7]	back : []	code : (B!=-1&&A%5!=0) [Condition]
9	  in : [8]		out : []		dom : [8]	back : []	code : return  [Expression] 1000 [Number] ; [Expression]
10	  in : [8]		out : [6]		dom : [8]	back : []	code : ++ [Expression] B [Expression] ; [Expression]
6	  in : [5,10]		out : [7,4]		dom : [5]	back : [10]	code : B<3 [Condition]
4	  in : [3,6]		out : []		dom : [0]	back : []	code : return  [Expression] A [Expression] ; [Expression]
11	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(0, "act", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(270, l0);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(271, l2);
mv.visitIincInsn(1, 1);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(272, l3);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l1);
mv.visitLineNumber(273, l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l5 = new Label();
mv.visitLabel(l5);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitLineNumber(274, l7);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitIincInsn(1, 1);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(276, l8);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_M1);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l9);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_5);
mv.visitInsn(IREM);
Label l10 = new Label();
mv.visitJumpInsn(IFNE, l10);
mv.visitLabel(l9);
mv.visitLineNumber(277, l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIntInsn(SIPUSH, 1000);
mv.visitInsn(IRETURN);
mv.visitLabel(l10);
mv.visitLineNumber(273, l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_3);
mv.visitJumpInsn(IF_ICMPLT, l7);
mv.visitLabel(l4);
mv.visitLineNumber(281, l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IRETURN);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitLocalVariable("this", "Lbooton/translator/flow/ForTest$14;", null, l0, l11, 0);
mv.visitLocalVariable("value", "I", null, l0, l11, 1);
mv.visitLocalVariable("i", "I", null, l5, l4, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
set 10  4  6
BDJ:function(A,B){
		// -1 -> 0
		// 270
		if (A!=0) {
			// 0 -> 1
			// 273
			B=0;
			// 1 -> 5
			// 5 -> 6
			l6: for (; B<3; ++B) {
				// 6 -> 7
				// 274
				++A;
				// 7 -> 8
				// 276
				if (B==-1||A%5==0) {
					// 8 -> 9
					// 277
					return 1000;
				}
				continue l6; // 8 -> 10 Entrance 6
			}
			// 6 -> 4
			// 281
			return A;
		} else {
			// 0 -> 2
			// 271
			++A;
			// 2 -> 3
			// 272
			// 3 -> 4
		}
		// 0 -> 4
	},
	
