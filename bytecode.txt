visit label -1
visit label 0
visit label 1
visit label 3
visit label 4
visit label 6
merge6
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1]		dom : [-1]	code : boot.BR.CE(B) [Expression] ; [Expression]
1	  in : [0]	out : [2]		dom : [0]	code : 
3	  in : []	out : [4]		dom : []	code : D=B.LL(A,C) [Expression] ; [Expression]
4	  in : [3]	out : [5,6]		dom : [3]	code : D==null [Condition]
6	  in : [4]	out : []		dom : [4]	code : 

visit label 5
visit label 2
visit label 7
merge7
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : boot.BR.CE(B) [Expression] ; [Expression]
1	  in : [0]		out : [2]		dom : [0]	code : 
3	  in : []		out : [4]		dom : []	code : D=B.LL(A,C) [Expression] ; [Expression]
4	  in : [3]		out : [5,6]		dom : [3]	code : D==null [Condition]
6	  in : [4]		out : [2]		dom : [4]	code : this.LP(A,C,D)==0 [Condition] return  [Expression] D [Expression] ; [Expression]
5	  in : [4]		out : [2]		dom : [4]	code : this.LO(A,C)==0 [Condition] return  [Expression] null [Expression] ; [Expression]
2	  in : [1,6,5]		out : [7]		dom : []	code : (C=this.BS(A)) [Expression in Enclose]
7	  in : [2]		out : []		dom : [2]	code : 

visit label 8
merge8
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : boot.BR.CE(B) [Expression] ; [Expression]
1	  in : [0]		out : [2]		dom : [0]	code : 
3	  in : [7]		out : [4]		dom : [7]	code : D=B.LL(A,C) [Expression] ; [Expression]
4	  in : [3]		out : [5,6]		dom : [3]	code : D==null [Condition]
6	  in : [4]		out : [2]		dom : [4]	code : this.LP(A,C,D)==0 [Condition] return  [Expression] D [Expression] ; [Expression]
5	  in : [4]		out : [2]		dom : [4]	code : this.LO(A,C)==0 [Condition] return  [Expression] null [Expression] ; [Expression]
2	  in : [1,6,5]		out : [7]		dom : []	code : 
7	  in : [2]		out : [3,8]		dom : [2]	code : (C=this.BS(A))!=null [Condition]
8	  in : [7]		out : []		dom : [7]	code : 

visit label 9
merge9
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : boot.BR.CE(B) [Expression] ; [Expression]
1	  in : [0]		out : [2]		dom : [0]	code : 
3	  in : [7]		out : [4]		dom : [7]	code : D=B.LL(A,C) [Expression] ; [Expression]
4	  in : [3]		out : [5,6]		dom : [3]	code : D==null [Condition]
6	  in : [4]		out : [2]		dom : [4]	code : this.LP(A,C,D)==0 [Condition] return  [Expression] D [Expression] ; [Expression]
5	  in : [4]		out : [2]		dom : [4]	code : this.LO(A,C)==0 [Condition] return  [Expression] null [Expression] ; [Expression]
2	  in : [1,6,5]		out : [7]		dom : []	code : 
7	  in : [2]		out : [3,8]		dom : [2]	code : (C=this.BS(A))!=null [Condition]
8	  in : [7]		out : []		dom : [7]	code : return  [Expression] C [Expression] ; [Expression]
9	  in : []		out : []		dom : []	code : 

js.util.Map computeIfPresent
-1	  in : []			out : [0]		dom : []	back : []			code : 
0	  in : [-1]			out : [1]		dom : [-1]	back : []			code : boot.BR.CE(B) [Expression] ; [Expression]
1	  in : [0]			out : [2]		dom : [0]	back : []			code : 
3	  in : [7]			out : [4]		dom : [7]	back : []			code : D=B.LL(A,C) [Expression] ; [Expression]
4	  in : [3]			out : [10,11]		dom : [3]	back : []			code : D==null [Condition]
11	  in : [4]			out : [6,2]		dom : [4]	back : []			code : this.LP(A,C,D)!=0 [Condition]
6	  in : [11]			out : [2]		dom : [11]	back : []			code : return  [Expression] D [Expression] ; [Expression]
10	  in : [4]			out : [5,2]		dom : [4]	back : []			code : this.LO(A,C)!=0 [Condition]
5	  in : [10]			out : [2]		dom : [10]	back : []			code : return  [Expression] null [Expression] ; [Expression]
2	  in : [1,6,5,10,11]		out : [7]		dom : [1]	back : [5,10,6,11]		code : 
7	  in : [2]			out : [3,8]		dom : [2]	back : []			code : (C=this.BS(A))!=null [Condition]
8	  in : [7]			out : []		dom : [7]	back : []			code : return  [Expression] C [Expression] ; [Expression]
9	  in : []			out : []		dom : []	back : []			code : 

{
mv = cw.visitMethod(ACC_PUBLIC, "computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "(TK;Ljava/util/function/BiFunction<-TK;-TV;+TV;>;)TV;", null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(791, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(793, l1);
Label l2 = new Label();
mv.visitJumpInsn(GOTO, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(794, l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/function/BiFunction", "apply", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitVarInsn(ASTORE, 4);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLineNumber(795, l4);
mv.visitVarInsn(ALOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(796, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "js/util/Map", "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARETURN);
mv.visitLabel(l5);
mv.visitLineNumber(797, l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "js/util/Map", "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitLineNumber(793, l2);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "js/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 3);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitJumpInsn(IFNONNULL, l3);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(799, l8);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARETURN);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLocalVariable("this", "Ljs/util/Map;", "Ljs/util/Map<TK;TV;>;", l0, l9, 0);
mv.visitLocalVariable("key", "Ljava/lang/Object;", "TK;", l0, l9, 1);
mv.visitLocalVariable("remappingFunction", "Ljava/util/function/BiFunction;", "Ljava/util/function/BiFunction<-TK;-TV;+TV;>;", l0, l9, 2);
mv.visitLocalVariable("oldValue", "Ljava/lang/Object;", "TV;", l3, l2, 3);
mv.visitLocalVariable("oldValue", "Ljava/lang/Object;", "TV;", l7, l9, 3);
mv.visitLocalVariable("newValue", "Ljava/lang/Object;", "TV;", l4, l2, 4);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
