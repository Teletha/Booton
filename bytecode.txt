visit label -1
visit label 0
visit label 1
visit label 3
merge3
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1]		dom : [-1]	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]	out : [2,3]		dom : [0]	code : A%2!=0 [Condition]
3	  in : [1]	out : []		dom : [1]	code : 

visit label 2
visit label 6
merge6
-1	  in : []	out : [0]		dom : []	code : 
0	  in : [-1]	out : [1]		dom : [-1]	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]	out : [2,3]		dom : [0]	code : A%2!=0 [Condition]
3	  in : [1]	out : [4]		dom : [1]	code : 
2	  in : [1]	out : [5,6]		dom : [1]	code : A>=0 [Condition]
6	  in : [2]	out : []		dom : [2]	code : 

visit label 5
visit label 4
visit label 8
merge8
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1]		out : [1]		dom : [-1]	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : A%2!=0 [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : 
2	  in : [1]		out : [5,6]		dom : [1]	code : A>=0 [Condition]
6	  in : [2]		out : [7]		dom : [2]	code : 
5	  in : [2]		out : [4]		dom : [2]	code : ++ [Expression] A [Expression] ; [Expression]
4	  in : [3,5]		out : [8]		dom : []	code : A [Expression] 4 [Number]
8	  in : [4]		out : []		dom : [4]	code : 

visit label 7
merge7
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1,8]		out : [1]		dom : []	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : A%2!=0 [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : 
2	  in : [1]		out : [5,6]		dom : [1]	code : A>=0 [Condition]
6	  in : [2]		out : [7]		dom : [2]	code : 
5	  in : [2]		out : [4]		dom : [2]	code : ++ [Expression] A [Expression] ; [Expression]
4	  in : [3,5]		out : [8]		dom : []	code : 
8	  in : [4]		out : [0,7]		dom : [4]	code : A<4 [Condition]
7	  in : [6,8]		out : []		dom : []	code : 

visit label 9
merge9
-1	  in : []		out : [0]		dom : []	code : 
0	  in : [-1,8]		out : [1]		dom : []	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	code : A%2!=0 [Condition]
3	  in : [1]		out : [4]		dom : [1]	code : 
2	  in : [1]		out : [5,6]		dom : [1]	code : A>=0 [Condition]
6	  in : [2]		out : [7]		dom : [2]	code : 
5	  in : [2]		out : [4]		dom : [2]	code : ++ [Expression] A [Expression] ; [Expression]
4	  in : [3,5]		out : [8]		dom : []	code : 
8	  in : [4]		out : [0,7]		dom : [4]	code : A<4 [Condition]
7	  in : [6,8]		out : []		dom : []	code : return  [Expression] A [Expression] ; [Expression]
9	  in : []		out : []		dom : []	code : 

booton.translator.flow.DoWhiteTest booton.translator.flow.DoWhiteTest
-1	  in : []		out : [0]		dom : []	back : []	code : 
0	  in : [-1,8]		out : [1]		dom : [-1]	back : [8]	code : ++ [Expression] A [Expression] ; [Expression]
1	  in : [0]		out : [2,3]		dom : [0]	back : []	code : A%2!=0 [Condition]
3	  in : [1]		out : [4]		dom : [1]	back : []	code : 
2	  in : [1]		out : [5,6]		dom : [1]	back : []	code : A>=0 [Condition]
6	  in : [2]		out : [7]		dom : [2]	back : []	code : 
5	  in : [2]		out : [4]		dom : [2]	back : []	code : ++ [Expression] A [Expression] ; [Expression]
4	  in : [3,5]		out : [8]		dom : [1]	back : []	code : 
8	  in : [4]		out : [0,7]		dom : [4]	back : []	code : A<4 [Condition]
7	  in : [6,8]		out : []		dom : [1]	back : []	code : return  [Expression] A [Expression] ; [Expression]
9	  in : []		out : []		dom : []	back : []	code : 

{
mv = cw.visitMethod(ACC_PUBLIC, "act", "(I)I", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(124, l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(1, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(126, l1);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_2);
mv.visitInsn(IREM);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLineNumber(127, l3);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitLineNumber(130, l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l5 = new Label();
mv.visitJumpInsn(IFGE, l5);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLineNumber(131, l6);
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l5);
mv.visitLineNumber(133, l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(1, 1);
mv.visitLabel(l4);
mv.visitLineNumber(134, l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_4);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLineNumber(123, l8);
mv.visitJumpInsn(IF_ICMPLT, l0);
mv.visitLabel(l7);
mv.visitLineNumber(136, l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IRETURN);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitLocalVariable("this", "Lbooton/translator/flow/DoWhiteTest$6;", null, l0, l9, 0);
mv.visitLocalVariable("value", "I", null, l0, l9, 1);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
BDJ:function(A){
		// 124
		l8 : do {
			++A;
			// 126
			if (A%2!=0) {
				// 130
				if (A>=0) {
					// 133
					++A;
				} else {
					// 131
				}
			} else {
				// 127
			}
			// 134
		} while (A<4)
	},
	
